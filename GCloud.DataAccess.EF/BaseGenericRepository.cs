using GCloud.Authorization.Contract;
using GCloud.DataAccess.Contract;
using GCloud.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Entity;
using System.Linq.Expressions;
using LinqKit;

namespace GCloud.DataAccess.EF
{
    public class BaseGenericRepository<TEntity> : IRepository<TEntity> where TEntity : class, IEntity
    {
        protected DbContext Context = null;
        /// <summary>
        /// Exclusive mode: The data context is generated by Repository, the data objects only use in the Repository's data context (Update, Delete).
        ///Shared mode: In many scenarios, we maybe use over 1 repository at the same time. If repositories have their own data context, it may cause the data duplicate issue. So we need to pass the shared data context to repositories in transaction on construction.
        /// </summary>
        protected readonly bool ShareContext;

        /// <summary>
        /// Tenant Context, it contains info about the current request tenant
        /// </summary>
        protected readonly IUserSession UserSession;

        protected BaseGenericRepository()
        {
            //Context = new DbContext();
        }

        public BaseGenericRepository(DbContext contextDb, IUserSession userContext)
        {
            if (contextDb == null)
                throw new ArgumentNullException("contextDb");

            if (userContext == null)
                throw new ArgumentNullException("userContext");

            Context = contextDb;
            UserSession = userContext;
            ShareContext = true;
        }

        protected DbSet<TEntity> DbSet
        {
            get
            {
                return Context.Set<TEntity>();
            }
        }

        public void Dispose()
        {
            if (ShareContext && (Context != null))
                Context.Dispose();
        }

        private Expression<Func<TEntity, bool>> CreateExpressionCombining(Expression<Func<TEntity, bool>> predicate)
        {
            if (!UserSession.IsSuperTenant)
            {
                Expression<Func<TEntity, bool>> predicate2 = FilterByTenant();
                predicate = predicate.And(predicate2);
            }
            return predicate;
        }

        #region IRepository<TEntity> Members


        protected virtual void SetTenant(TEntity entity)
        {

        }

        protected virtual void SetActive(TEntity entity, bool value)
        {

        }

        /// <summary>
        /// Add a new Entry in the DataBase
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public virtual TEntity Add(TEntity entity)
        {
            SetActive(entity, true);
            if (!UserSession.IsSuperTenant)
                SetTenant(entity);
            var newEntry = DbSet.Add(entity);
            if (!ShareContext)
                Context.SaveChanges();
            return newEntry;
        }

        /// <summary>
        /// Add a list of items in the data base
        /// </summary>
        /// <param name="items">List Items to be added</param>
        /// <returns>True if the process was success</returns>
        public virtual int Add(IEnumerable<TEntity> items)
        {
            foreach (TEntity item in items)
            {
                if (!UserSession.IsSuperTenant)
                    SetTenant(item);
                SetActive(item, true);
                //DbSet.Add(item);
            }
            DbSet.AddRange(items);
            if (!ShareContext)
                return Context.SaveChanges();
            return 0;
        }

        /// <summary>
        /// Update the entity in the database
        /// </summary>
        /// <param name="entity">Entity to be updated</param>
        /// <returns>Number of entities updated</returns>
        public virtual int Update(TEntity entity)
        {
            if (!UserSession.IsSuperTenant)
                SetTenant(entity);

            var entry = Context.Entry(entity);
            DbSet.Attach(entity);
            entry.State = EntityState.Modified;
            if (!ShareContext)
                return Context.SaveChanges();
            return 0;
        }

        /// <summary>
        /// Delete from the data base the entity send as parameter
        /// </summary>
        /// <param name="entity">Entitie to be removed</param>
        /// <returns>Number of entities removed</returns>
        public virtual int Delete(TEntity entity)
        {
            DbSet.Remove(entity);
            if (!ShareContext)
                return Context.SaveChanges();
            return 0;
        }

        /// <summary>
        /// Remove a entitie in the data base
        /// </summary>
        /// <param name="id">Id entitie to be removed from the data base</param>
        /// <returns>Number of entities removed</returns>
        public virtual int Delete(Guid id)
        {
            var entity = Get(id);
            DbSet.Remove(entity);
            if (!ShareContext)
                return Context.SaveChanges();
            return 0;
        }

        /// <summary>
        /// Remove a list of entities in the data base
        /// </summary>
        /// <param name="entities">List of Entities to be removed</param>
        /// <returns>Number of entities removed</returns>
        public virtual int Delete(IEnumerable<TEntity> entities)
        {
            foreach (var obj in entities)
                DbSet.Remove(obj);
            if (!ShareContext)
                return Context.SaveChanges();
            return 0;
        }


        public virtual int Delete(Expression<Func<TEntity, bool>> predicate)
        {
            var objects = FilterBy(predicate);
            foreach (var obj in objects)
                DbSet.Remove(obj);
            if (!ShareContext)
                return Context.SaveChanges();
            return 0;
        }

        #endregion

        #region IReadOnlyRepository<T> Members

        public virtual TEntity Get(Guid id)
        {
            return DbSet.AsExpandable().FirstOrDefault(CreateExpressionCombining(t => t.Id == id));
        }

        public virtual IQueryable<TEntity> All()
        {
            if (!UserSession.IsSuperTenant)
            {
                return DbSet.Where(FilterByTenant()).Where(FilterByActive(true));
            }
            return DbSet.Where(FilterByActive(true));
        }

        public virtual IQueryable<TEntity> FilterBy(Expression<Func<TEntity, bool>> expression)
        {
            return DbSet.AsExpandable().Where(expression).AsQueryable().Where(FilterByTenant());
        }
        #endregion

        #region IReadOnlyRepositoryEagerLoading<T> Members

        public virtual TEntity Get(Guid id, params Expression<Func<TEntity, object>>[] includes)
        {
            return FilterBy(t => t.Id == id, includes).FirstOrDefault();
        }

        public virtual IQueryable<TEntity> All(params Expression<Func<TEntity, object>>[] includes)
        {
            IQueryable<TEntity> query = DbSet;
            query = query.IncludeMultiple(includes);
            return query.AsExpandable().Where(FilterByTenant());
        }

        public virtual IQueryable<TEntity> FilterBy(Expression<Func<TEntity, bool>> expression, params Expression<Func<TEntity, object>>[] includes)
        {
            IQueryable<TEntity> query = DbSet;
            query = query.IncludeMultiple(includes);
            return query.AsExpandable().Where(expression).AsQueryable().Where(FilterByTenant());
        }

        #endregion

        /// <summary>
        /// Filter by the current tenan Id
        /// </summary>
        /// <returns></returns>
        protected virtual Expression<Func<TEntity, bool>> FilterByTenant()
        {
            Expression<Func<TEntity, bool>> predicate1 = e => true;
            return predicate1;
        }

       

        protected virtual Expression<Func<TEntity, bool>> FilterByActive(bool value)
        {
            Expression<Func<TEntity, bool>> predicate1 = e => value;
            return predicate1;
        }

        protected virtual TEntity SetAuditAdd(TEntity entity)
        {
            return entity;
        }

        protected virtual TEntity SetAuditUpdate(TEntity entity)
        {
            return entity;
        }
    }
}

